cmake_minimum_required(VERSION 3.0.2)
project(tcp_ros_bridge)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  sensor_msgs
  std_msgs
  uuv_gazebo_ros_plugins_msgs
)

find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

# generate_messages(
#   DEPENDENCIES
#   sensor_msgs#   std_msgs#   uuv_gazebo_ros_plugins_msgs
# )

catkin_package(
  INCLUDE_DIRS 
    include
  LIBRARIES 
    tcp_to_ros
  CATKIN_DEPENDS 
    roscpp 
    rospy 
    sensor_msgs 
    std_msgs 
    uuv_gazebo_ros_plugins_msgs
  DEPENDS 
    system_lib
)

###########
## Build ##
###########

include_directories(
  include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
add_library(tcp_ros_bridge
  src/tcp_ros_bridge.cpp
)

add_library(tcp_ros_bridge_with_server
  src/tcp_ros_bridge_with_server.cpp
)

add_executable(async_tcp_server_test test/async_tcp_server_test.cpp)
add_executable(uuv_ctrl_msg_parser_test test/uuv_ctrl_msg_parser_test.cpp)
add_executable(uuv_status_msg_serialize_test test/uuv_status_msg_serialize_test.cpp)

add_executable(tcp_ros_bridge_test test/tcp_ros_bridge_test.cpp)
add_executable(tcp_ros_bridge_with_server_test test/tcp_ros_bridge_with_server_test.cpp)

## Add cmake target dependencies of the executable
## same as for the library above
add_dependencies(async_tcp_server_test ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(uuv_ctrl_msg_parser_test ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(uuv_status_msg_serialize_test ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

add_dependencies(tcp_ros_bridge_test ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(tcp_ros_bridge_with_server_test ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

target_link_libraries(async_tcp_server_test
  ${catkin_LIBRARIES}
)
target_link_libraries(uuv_ctrl_msg_parser_test
  ${catkin_LIBRARIES}
)
target_link_libraries(uuv_status_msg_serialize_test
  ${catkin_LIBRARIES}
)

target_link_libraries(tcp_ros_bridge_test
  tcp_ros_bridge
  ${catkin_LIBRARIES}
)

target_link_libraries(tcp_ros_bridge_with_server_test
  tcp_ros_bridge_with_server
  ${catkin_LIBRARIES}
)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# catkin_install_python(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_tcp_to_ros.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
